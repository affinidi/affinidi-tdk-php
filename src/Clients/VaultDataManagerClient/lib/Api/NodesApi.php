<?php
/**
 * NodesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  AffinidiTdk\Clients\VaultDataManagerClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * VaultFileSystem
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AffinidiTdk\Clients\VaultDataManagerClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use AffinidiTdk\Clients\VaultDataManagerClient\ApiException;
use AffinidiTdk\Clients\VaultDataManagerClient\InvalidJwtTokenError;
use AffinidiTdk\Clients\VaultDataManagerClient\InvalidParameterError;
use AffinidiTdk\Clients\VaultDataManagerClient\NotFoundError;
use AffinidiTdk\Clients\VaultDataManagerClient\Configuration;
use AffinidiTdk\Clients\VaultDataManagerClient\HeaderSelector;
use AffinidiTdk\Clients\VaultDataManagerClient\ObjectSerializer;

/**
 * NodesApi Class Doc Comment
 *
 * @category Class
 * @package  AffinidiTdk\Clients\VaultDataManagerClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class NodesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createNode' => [
            'application/json',
        ],
        'createProfile' => [
            'application/json',
        ],
        'deleteNode' => [
            'application/json',
        ],
        'getDetailedNodeInfo' => [
            'application/json',
        ],
        'initNodes' => [
            'application/json',
        ],
        'listNodeChildren' => [
            'application/json',
        ],
        'listRootNodeChildren' => [
            'application/json',
        ],
        'moveNode' => [
            'application/json',
        ],
        'permanentlyDeleteNode' => [
            'application/json',
        ],
        'restoreNodeFromTrashbin' => [
            'application/json',
        ],
        'updateNode' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createNode
     *
     * @param  \AffinidiTdk\Clients\VaultDataManagerClient\Model\CreateNodeInput $create_node_input CreateNode (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNode'] to see the possible values for this operation
     *
     * @throws \AffinidiTdk\Clients\VaultDataManagerClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \AffinidiTdk\Clients\VaultDataManagerClient\Model\CreateNodeOK|\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError
     */
    public function createNode($create_node_input, string $contentType = self::contentTypes['createNode'][0])
    {
        list($response) = $this->createNodeWithHttpInfo($create_node_input, $contentType);
        return $response;
    }

    /**
     * Operation createNodeWithHttpInfo
     *
     * @param  \AffinidiTdk\Clients\VaultDataManagerClient\Model\CreateNodeInput $create_node_input CreateNode (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNode'] to see the possible values for this operation
     *
     * @throws \AffinidiTdk\Clients\VaultDataManagerClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \AffinidiTdk\Clients\VaultDataManagerClient\Model\CreateNodeOK|\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNodeWithHttpInfo($create_node_input, string $contentType = self::contentTypes['createNode'][0])
    {
        $request = $this->createNodeRequest($create_node_input, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $jsonResponse = json_decode($e->getResponse()->getBody());
                if ($jsonResponse->name === 'InvalidJwtTokenError') {
                    $issue = $jsonResponse->details[0]->issue;
                    throw new InvalidJwtTokenError($issue, $jsonResponse->traceId);
                }

                if ($jsonResponse->name === 'NotFoundError') {
                    throw new NotFoundError($jsonResponse->message, $jsonResponse->traceId);
                }

                if ($jsonResponse->name === 'InvalidParameterError') {
                    throw new InvalidParameterError($jsonResponse->message, $jsonResponse->details, $jsonResponse->traceId);
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\AffinidiTdk\Clients\VaultDataManagerClient\Model\CreateNodeOK' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AffinidiTdk\Clients\VaultDataManagerClient\Model\CreateNodeOK' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AffinidiTdk\Clients\VaultDataManagerClient\Model\CreateNodeOK', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\AffinidiTdk\Clients\VaultDataManagerClient\Model\CreateNodeOK';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AffinidiTdk\Clients\VaultDataManagerClient\Model\CreateNodeOK',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createNodeAsync
     *
     * @param  \AffinidiTdk\Clients\VaultDataManagerClient\Model\CreateNodeInput $create_node_input CreateNode (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNodeAsync($create_node_input, string $contentType = self::contentTypes['createNode'][0])
    {
        return $this->createNodeAsyncWithHttpInfo($create_node_input, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNodeAsyncWithHttpInfo
     *
     * @param  \AffinidiTdk\Clients\VaultDataManagerClient\Model\CreateNodeInput $create_node_input CreateNode (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNodeAsyncWithHttpInfo($create_node_input, string $contentType = self::contentTypes['createNode'][0])
    {
        $returnType = '\AffinidiTdk\Clients\VaultDataManagerClient\Model\CreateNodeOK';
        $request = $this->createNodeRequest($create_node_input, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNode'
     *
     * @param  \AffinidiTdk\Clients\VaultDataManagerClient\Model\CreateNodeInput $create_node_input CreateNode (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createNodeRequest($create_node_input, string $contentType = self::contentTypes['createNode'][0])
    {

        // verify the required parameter 'create_node_input' is set
        if ($create_node_input === null || (is_array($create_node_input) && count($create_node_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_node_input when calling createNode'
            );
        }


        $resourcePath = '/v1/nodes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_node_input)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_node_input));
            } else {
                $httpBody = $create_node_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('authorization');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createProfile
     *
     * @param  \AffinidiTdk\Clients\VaultDataManagerClient\Model\CreateProfileInput $create_profile_input CreateNode (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createProfile'] to see the possible values for this operation
     *
     * @throws \AffinidiTdk\Clients\VaultDataManagerClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \AffinidiTdk\Clients\VaultDataManagerClient\Model\CreateNodeOK|\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError
     */
    public function createProfile($create_profile_input, string $contentType = self::contentTypes['createProfile'][0])
    {
        list($response) = $this->createProfileWithHttpInfo($create_profile_input, $contentType);
        return $response;
    }

    /**
     * Operation createProfileWithHttpInfo
     *
     * @param  \AffinidiTdk\Clients\VaultDataManagerClient\Model\CreateProfileInput $create_profile_input CreateNode (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createProfile'] to see the possible values for this operation
     *
     * @throws \AffinidiTdk\Clients\VaultDataManagerClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \AffinidiTdk\Clients\VaultDataManagerClient\Model\CreateNodeOK|\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createProfileWithHttpInfo($create_profile_input, string $contentType = self::contentTypes['createProfile'][0])
    {
        $request = $this->createProfileRequest($create_profile_input, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $jsonResponse = json_decode($e->getResponse()->getBody());
                if ($jsonResponse->name === 'InvalidJwtTokenError') {
                    $issue = $jsonResponse->details[0]->issue;
                    throw new InvalidJwtTokenError($issue, $jsonResponse->traceId);
                }

                if ($jsonResponse->name === 'NotFoundError') {
                    throw new NotFoundError($jsonResponse->message, $jsonResponse->traceId);
                }

                if ($jsonResponse->name === 'InvalidParameterError') {
                    throw new InvalidParameterError($jsonResponse->message, $jsonResponse->details, $jsonResponse->traceId);
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\AffinidiTdk\Clients\VaultDataManagerClient\Model\CreateNodeOK' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AffinidiTdk\Clients\VaultDataManagerClient\Model\CreateNodeOK' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AffinidiTdk\Clients\VaultDataManagerClient\Model\CreateNodeOK', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\AffinidiTdk\Clients\VaultDataManagerClient\Model\CreateNodeOK';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AffinidiTdk\Clients\VaultDataManagerClient\Model\CreateNodeOK',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createProfileAsync
     *
     * @param  \AffinidiTdk\Clients\VaultDataManagerClient\Model\CreateProfileInput $create_profile_input CreateNode (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProfileAsync($create_profile_input, string $contentType = self::contentTypes['createProfile'][0])
    {
        return $this->createProfileAsyncWithHttpInfo($create_profile_input, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createProfileAsyncWithHttpInfo
     *
     * @param  \AffinidiTdk\Clients\VaultDataManagerClient\Model\CreateProfileInput $create_profile_input CreateNode (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createProfileAsyncWithHttpInfo($create_profile_input, string $contentType = self::contentTypes['createProfile'][0])
    {
        $returnType = '\AffinidiTdk\Clients\VaultDataManagerClient\Model\CreateNodeOK';
        $request = $this->createProfileRequest($create_profile_input, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createProfile'
     *
     * @param  \AffinidiTdk\Clients\VaultDataManagerClient\Model\CreateProfileInput $create_profile_input CreateNode (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createProfileRequest($create_profile_input, string $contentType = self::contentTypes['createProfile'][0])
    {

        // verify the required parameter 'create_profile_input' is set
        if ($create_profile_input === null || (is_array($create_profile_input) && count($create_profile_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_profile_input when calling createProfile'
            );
        }


        $resourcePath = '/v1/nodes/create-profile';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_profile_input)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_profile_input));
            } else {
                $httpBody = $create_profile_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('authorization');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteNode
     *
     * @param  string $node_id node_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNode'] to see the possible values for this operation
     *
     * @throws \AffinidiTdk\Clients\VaultDataManagerClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \AffinidiTdk\Clients\VaultDataManagerClient\Model\DeleteNodeDto|\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError
     */
    public function deleteNode($node_id, string $contentType = self::contentTypes['deleteNode'][0])
    {
        list($response) = $this->deleteNodeWithHttpInfo($node_id, $contentType);
        return $response;
    }

    /**
     * Operation deleteNodeWithHttpInfo
     *
     * @param  string $node_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNode'] to see the possible values for this operation
     *
     * @throws \AffinidiTdk\Clients\VaultDataManagerClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \AffinidiTdk\Clients\VaultDataManagerClient\Model\DeleteNodeDto|\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteNodeWithHttpInfo($node_id, string $contentType = self::contentTypes['deleteNode'][0])
    {
        $request = $this->deleteNodeRequest($node_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $jsonResponse = json_decode($e->getResponse()->getBody());
                if ($jsonResponse->name === 'InvalidJwtTokenError') {
                    $issue = $jsonResponse->details[0]->issue;
                    throw new InvalidJwtTokenError($issue, $jsonResponse->traceId);
                }

                if ($jsonResponse->name === 'NotFoundError') {
                    throw new NotFoundError($jsonResponse->message, $jsonResponse->traceId);
                }

                if ($jsonResponse->name === 'InvalidParameterError') {
                    throw new InvalidParameterError($jsonResponse->message, $jsonResponse->details, $jsonResponse->traceId);
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 202:
                    if ('\AffinidiTdk\Clients\VaultDataManagerClient\Model\DeleteNodeDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AffinidiTdk\Clients\VaultDataManagerClient\Model\DeleteNodeDto' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AffinidiTdk\Clients\VaultDataManagerClient\Model\DeleteNodeDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\AffinidiTdk\Clients\VaultDataManagerClient\Model\DeleteNodeDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AffinidiTdk\Clients\VaultDataManagerClient\Model\DeleteNodeDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteNodeAsync
     *
     * @param  string $node_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNodeAsync($node_id, string $contentType = self::contentTypes['deleteNode'][0])
    {
        return $this->deleteNodeAsyncWithHttpInfo($node_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteNodeAsyncWithHttpInfo
     *
     * @param  string $node_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNodeAsyncWithHttpInfo($node_id, string $contentType = self::contentTypes['deleteNode'][0])
    {
        $returnType = '\AffinidiTdk\Clients\VaultDataManagerClient\Model\DeleteNodeDto';
        $request = $this->deleteNodeRequest($node_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteNode'
     *
     * @param  string $node_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteNodeRequest($node_id, string $contentType = self::contentTypes['deleteNode'][0])
    {

        // verify the required parameter 'node_id' is set
        if ($node_id === null || (is_array($node_id) && count($node_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $node_id when calling deleteNode'
            );
        }
        if (!preg_match("/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/", $node_id)) {
            throw new \InvalidArgumentException("invalid value for \"node_id\" when calling NodesApi.deleteNode, must conform to the pattern /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/.");
        }
        

        $resourcePath = '/v1/nodes/{nodeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($node_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nodeId' . '}',
                ObjectSerializer::toPathValue($node_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('authorization');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDetailedNodeInfo
     *
     * @param  string $node_id node_id (required)
     * @param  string|null $dek A base64url encoded data encryption key, encrypted using VFS public key. getUrl will not be returned if dek is not provided (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDetailedNodeInfo'] to see the possible values for this operation
     *
     * @throws \AffinidiTdk\Clients\VaultDataManagerClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \AffinidiTdk\Clients\VaultDataManagerClient\Model\GetDetailedNodeInfoOK|\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError
     */
    public function getDetailedNodeInfo($node_id, $dek = null, string $contentType = self::contentTypes['getDetailedNodeInfo'][0])
    {
        list($response) = $this->getDetailedNodeInfoWithHttpInfo($node_id, $dek, $contentType);
        return $response;
    }

    /**
     * Operation getDetailedNodeInfoWithHttpInfo
     *
     * @param  string $node_id (required)
     * @param  string|null $dek A base64url encoded data encryption key, encrypted using VFS public key. getUrl will not be returned if dek is not provided (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDetailedNodeInfo'] to see the possible values for this operation
     *
     * @throws \AffinidiTdk\Clients\VaultDataManagerClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \AffinidiTdk\Clients\VaultDataManagerClient\Model\GetDetailedNodeInfoOK|\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDetailedNodeInfoWithHttpInfo($node_id, $dek = null, string $contentType = self::contentTypes['getDetailedNodeInfo'][0])
    {
        $request = $this->getDetailedNodeInfoRequest($node_id, $dek, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $jsonResponse = json_decode($e->getResponse()->getBody());
                if ($jsonResponse->name === 'InvalidJwtTokenError') {
                    $issue = $jsonResponse->details[0]->issue;
                    throw new InvalidJwtTokenError($issue, $jsonResponse->traceId);
                }

                if ($jsonResponse->name === 'NotFoundError') {
                    throw new NotFoundError($jsonResponse->message, $jsonResponse->traceId);
                }

                if ($jsonResponse->name === 'InvalidParameterError') {
                    throw new InvalidParameterError($jsonResponse->message, $jsonResponse->details, $jsonResponse->traceId);
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\AffinidiTdk\Clients\VaultDataManagerClient\Model\GetDetailedNodeInfoOK' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AffinidiTdk\Clients\VaultDataManagerClient\Model\GetDetailedNodeInfoOK' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AffinidiTdk\Clients\VaultDataManagerClient\Model\GetDetailedNodeInfoOK', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\AffinidiTdk\Clients\VaultDataManagerClient\Model\GetDetailedNodeInfoOK';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AffinidiTdk\Clients\VaultDataManagerClient\Model\GetDetailedNodeInfoOK',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDetailedNodeInfoAsync
     *
     * @param  string $node_id (required)
     * @param  string|null $dek A base64url encoded data encryption key, encrypted using VFS public key. getUrl will not be returned if dek is not provided (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDetailedNodeInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDetailedNodeInfoAsync($node_id, $dek = null, string $contentType = self::contentTypes['getDetailedNodeInfo'][0])
    {
        return $this->getDetailedNodeInfoAsyncWithHttpInfo($node_id, $dek, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDetailedNodeInfoAsyncWithHttpInfo
     *
     * @param  string $node_id (required)
     * @param  string|null $dek A base64url encoded data encryption key, encrypted using VFS public key. getUrl will not be returned if dek is not provided (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDetailedNodeInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDetailedNodeInfoAsyncWithHttpInfo($node_id, $dek = null, string $contentType = self::contentTypes['getDetailedNodeInfo'][0])
    {
        $returnType = '\AffinidiTdk\Clients\VaultDataManagerClient\Model\GetDetailedNodeInfoOK';
        $request = $this->getDetailedNodeInfoRequest($node_id, $dek, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDetailedNodeInfo'
     *
     * @param  string $node_id (required)
     * @param  string|null $dek A base64url encoded data encryption key, encrypted using VFS public key. getUrl will not be returned if dek is not provided (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDetailedNodeInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDetailedNodeInfoRequest($node_id, $dek = null, string $contentType = self::contentTypes['getDetailedNodeInfo'][0])
    {

        // verify the required parameter 'node_id' is set
        if ($node_id === null || (is_array($node_id) && count($node_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $node_id when calling getDetailedNodeInfo'
            );
        }
        if (!preg_match("/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/", $node_id)) {
            throw new \InvalidArgumentException("invalid value for \"node_id\" when calling NodesApi.getDetailedNodeInfo, must conform to the pattern /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/.");
        }
        


        $resourcePath = '/v1/nodes/{nodeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dek,
            'dek', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($node_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nodeId' . '}',
                ObjectSerializer::toPathValue($node_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('authorization');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation initNodes
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['initNodes'] to see the possible values for this operation
     *
     * @throws \AffinidiTdk\Clients\VaultDataManagerClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \AffinidiTdk\Clients\VaultDataManagerClient\Model\InitNodesOK|\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError
     * @deprecated
     */
    public function initNodes(string $contentType = self::contentTypes['initNodes'][0])
    {
        list($response) = $this->initNodesWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation initNodesWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['initNodes'] to see the possible values for this operation
     *
     * @throws \AffinidiTdk\Clients\VaultDataManagerClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \AffinidiTdk\Clients\VaultDataManagerClient\Model\InitNodesOK|\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function initNodesWithHttpInfo(string $contentType = self::contentTypes['initNodes'][0])
    {
        $request = $this->initNodesRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $jsonResponse = json_decode($e->getResponse()->getBody());
                if ($jsonResponse->name === 'InvalidJwtTokenError') {
                    $issue = $jsonResponse->details[0]->issue;
                    throw new InvalidJwtTokenError($issue, $jsonResponse->traceId);
                }

                if ($jsonResponse->name === 'NotFoundError') {
                    throw new NotFoundError($jsonResponse->message, $jsonResponse->traceId);
                }

                if ($jsonResponse->name === 'InvalidParameterError') {
                    throw new InvalidParameterError($jsonResponse->message, $jsonResponse->details, $jsonResponse->traceId);
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\AffinidiTdk\Clients\VaultDataManagerClient\Model\InitNodesOK' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AffinidiTdk\Clients\VaultDataManagerClient\Model\InitNodesOK' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AffinidiTdk\Clients\VaultDataManagerClient\Model\InitNodesOK', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\AffinidiTdk\Clients\VaultDataManagerClient\Model\InitNodesOK';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AffinidiTdk\Clients\VaultDataManagerClient\Model\InitNodesOK',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation initNodesAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['initNodes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function initNodesAsync(string $contentType = self::contentTypes['initNodes'][0])
    {
        return $this->initNodesAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation initNodesAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['initNodes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function initNodesAsyncWithHttpInfo(string $contentType = self::contentTypes['initNodes'][0])
    {
        $returnType = '\AffinidiTdk\Clients\VaultDataManagerClient\Model\InitNodesOK';
        $request = $this->initNodesRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'initNodes'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['initNodes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function initNodesRequest(string $contentType = self::contentTypes['initNodes'][0])
    {


        $resourcePath = '/v1/nodes/init';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('authorization');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listNodeChildren
     *
     * @param  string $node_id Description for nodeId. (required)
     * @param  int|null $limit Maximum number of records to fetch in a list (optional, default to 10)
     * @param  string|null $exclusive_start_key exclusiveStartKey for retrieving the next batch of data. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listNodeChildren'] to see the possible values for this operation
     *
     * @throws \AffinidiTdk\Clients\VaultDataManagerClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \AffinidiTdk\Clients\VaultDataManagerClient\Model\ListNodeChildrenOK|\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError
     */
    public function listNodeChildren($node_id, $limit = 10, $exclusive_start_key = null, string $contentType = self::contentTypes['listNodeChildren'][0])
    {
        list($response) = $this->listNodeChildrenWithHttpInfo($node_id, $limit, $exclusive_start_key, $contentType);
        return $response;
    }

    /**
     * Operation listNodeChildrenWithHttpInfo
     *
     * @param  string $node_id Description for nodeId. (required)
     * @param  int|null $limit Maximum number of records to fetch in a list (optional, default to 10)
     * @param  string|null $exclusive_start_key exclusiveStartKey for retrieving the next batch of data. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listNodeChildren'] to see the possible values for this operation
     *
     * @throws \AffinidiTdk\Clients\VaultDataManagerClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \AffinidiTdk\Clients\VaultDataManagerClient\Model\ListNodeChildrenOK|\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError, HTTP status code, HTTP response headers (array of strings)
     */
    public function listNodeChildrenWithHttpInfo($node_id, $limit = 10, $exclusive_start_key = null, string $contentType = self::contentTypes['listNodeChildren'][0])
    {
        $request = $this->listNodeChildrenRequest($node_id, $limit, $exclusive_start_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $jsonResponse = json_decode($e->getResponse()->getBody());
                if ($jsonResponse->name === 'InvalidJwtTokenError') {
                    $issue = $jsonResponse->details[0]->issue;
                    throw new InvalidJwtTokenError($issue, $jsonResponse->traceId);
                }

                if ($jsonResponse->name === 'NotFoundError') {
                    throw new NotFoundError($jsonResponse->message, $jsonResponse->traceId);
                }

                if ($jsonResponse->name === 'InvalidParameterError') {
                    throw new InvalidParameterError($jsonResponse->message, $jsonResponse->details, $jsonResponse->traceId);
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\AffinidiTdk\Clients\VaultDataManagerClient\Model\ListNodeChildrenOK' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AffinidiTdk\Clients\VaultDataManagerClient\Model\ListNodeChildrenOK' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AffinidiTdk\Clients\VaultDataManagerClient\Model\ListNodeChildrenOK', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\AffinidiTdk\Clients\VaultDataManagerClient\Model\ListNodeChildrenOK';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AffinidiTdk\Clients\VaultDataManagerClient\Model\ListNodeChildrenOK',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listNodeChildrenAsync
     *
     * @param  string $node_id Description for nodeId. (required)
     * @param  int|null $limit Maximum number of records to fetch in a list (optional, default to 10)
     * @param  string|null $exclusive_start_key exclusiveStartKey for retrieving the next batch of data. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listNodeChildren'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listNodeChildrenAsync($node_id, $limit = 10, $exclusive_start_key = null, string $contentType = self::contentTypes['listNodeChildren'][0])
    {
        return $this->listNodeChildrenAsyncWithHttpInfo($node_id, $limit, $exclusive_start_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listNodeChildrenAsyncWithHttpInfo
     *
     * @param  string $node_id Description for nodeId. (required)
     * @param  int|null $limit Maximum number of records to fetch in a list (optional, default to 10)
     * @param  string|null $exclusive_start_key exclusiveStartKey for retrieving the next batch of data. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listNodeChildren'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listNodeChildrenAsyncWithHttpInfo($node_id, $limit = 10, $exclusive_start_key = null, string $contentType = self::contentTypes['listNodeChildren'][0])
    {
        $returnType = '\AffinidiTdk\Clients\VaultDataManagerClient\Model\ListNodeChildrenOK';
        $request = $this->listNodeChildrenRequest($node_id, $limit, $exclusive_start_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listNodeChildren'
     *
     * @param  string $node_id Description for nodeId. (required)
     * @param  int|null $limit Maximum number of records to fetch in a list (optional, default to 10)
     * @param  string|null $exclusive_start_key exclusiveStartKey for retrieving the next batch of data. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listNodeChildren'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listNodeChildrenRequest($node_id, $limit = 10, $exclusive_start_key = null, string $contentType = self::contentTypes['listNodeChildren'][0])
    {

        // verify the required parameter 'node_id' is set
        if ($node_id === null || (is_array($node_id) && count($node_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $node_id when calling listNodeChildren'
            );
        }

        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling NodesApi.listNodeChildren, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling NodesApi.listNodeChildren, must be bigger than or equal to 1.');
        }
        
        if ($exclusive_start_key !== null && strlen($exclusive_start_key) > 3000) {
            throw new \InvalidArgumentException('invalid length for "$exclusive_start_key" when calling NodesApi.listNodeChildren, must be smaller than or equal to 3000.');
        }
        

        $resourcePath = '/v1/nodes/{nodeId}/children';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $exclusive_start_key,
            'exclusiveStartKey', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($node_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nodeId' . '}',
                ObjectSerializer::toPathValue($node_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('authorization');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listRootNodeChildren
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listRootNodeChildren'] to see the possible values for this operation
     *
     * @throws \AffinidiTdk\Clients\VaultDataManagerClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \AffinidiTdk\Clients\VaultDataManagerClient\Model\ListRootNodeChildrenOK|\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError
     */
    public function listRootNodeChildren(string $contentType = self::contentTypes['listRootNodeChildren'][0])
    {
        list($response) = $this->listRootNodeChildrenWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation listRootNodeChildrenWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listRootNodeChildren'] to see the possible values for this operation
     *
     * @throws \AffinidiTdk\Clients\VaultDataManagerClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \AffinidiTdk\Clients\VaultDataManagerClient\Model\ListRootNodeChildrenOK|\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError, HTTP status code, HTTP response headers (array of strings)
     */
    public function listRootNodeChildrenWithHttpInfo(string $contentType = self::contentTypes['listRootNodeChildren'][0])
    {
        $request = $this->listRootNodeChildrenRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $jsonResponse = json_decode($e->getResponse()->getBody());
                if ($jsonResponse->name === 'InvalidJwtTokenError') {
                    $issue = $jsonResponse->details[0]->issue;
                    throw new InvalidJwtTokenError($issue, $jsonResponse->traceId);
                }

                if ($jsonResponse->name === 'NotFoundError') {
                    throw new NotFoundError($jsonResponse->message, $jsonResponse->traceId);
                }

                if ($jsonResponse->name === 'InvalidParameterError') {
                    throw new InvalidParameterError($jsonResponse->message, $jsonResponse->details, $jsonResponse->traceId);
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\AffinidiTdk\Clients\VaultDataManagerClient\Model\ListRootNodeChildrenOK' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AffinidiTdk\Clients\VaultDataManagerClient\Model\ListRootNodeChildrenOK' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AffinidiTdk\Clients\VaultDataManagerClient\Model\ListRootNodeChildrenOK', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\AffinidiTdk\Clients\VaultDataManagerClient\Model\ListRootNodeChildrenOK';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AffinidiTdk\Clients\VaultDataManagerClient\Model\ListRootNodeChildrenOK',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listRootNodeChildrenAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listRootNodeChildren'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listRootNodeChildrenAsync(string $contentType = self::contentTypes['listRootNodeChildren'][0])
    {
        return $this->listRootNodeChildrenAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listRootNodeChildrenAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listRootNodeChildren'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listRootNodeChildrenAsyncWithHttpInfo(string $contentType = self::contentTypes['listRootNodeChildren'][0])
    {
        $returnType = '\AffinidiTdk\Clients\VaultDataManagerClient\Model\ListRootNodeChildrenOK';
        $request = $this->listRootNodeChildrenRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listRootNodeChildren'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listRootNodeChildren'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listRootNodeChildrenRequest(string $contentType = self::contentTypes['listRootNodeChildren'][0])
    {


        $resourcePath = '/v1/nodes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('authorization');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation moveNode
     *
     * @param  string $node_id node_id (required)
     * @param  \AffinidiTdk\Clients\VaultDataManagerClient\Model\MoveNodeInput $move_node_input MoveNode (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['moveNode'] to see the possible values for this operation
     *
     * @throws \AffinidiTdk\Clients\VaultDataManagerClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \AffinidiTdk\Clients\VaultDataManagerClient\Model\MoveNodeDto|\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError
     */
    public function moveNode($node_id, $move_node_input, string $contentType = self::contentTypes['moveNode'][0])
    {
        list($response) = $this->moveNodeWithHttpInfo($node_id, $move_node_input, $contentType);
        return $response;
    }

    /**
     * Operation moveNodeWithHttpInfo
     *
     * @param  string $node_id (required)
     * @param  \AffinidiTdk\Clients\VaultDataManagerClient\Model\MoveNodeInput $move_node_input MoveNode (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['moveNode'] to see the possible values for this operation
     *
     * @throws \AffinidiTdk\Clients\VaultDataManagerClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \AffinidiTdk\Clients\VaultDataManagerClient\Model\MoveNodeDto|\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError, HTTP status code, HTTP response headers (array of strings)
     */
    public function moveNodeWithHttpInfo($node_id, $move_node_input, string $contentType = self::contentTypes['moveNode'][0])
    {
        $request = $this->moveNodeRequest($node_id, $move_node_input, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $jsonResponse = json_decode($e->getResponse()->getBody());
                if ($jsonResponse->name === 'InvalidJwtTokenError') {
                    $issue = $jsonResponse->details[0]->issue;
                    throw new InvalidJwtTokenError($issue, $jsonResponse->traceId);
                }

                if ($jsonResponse->name === 'NotFoundError') {
                    throw new NotFoundError($jsonResponse->message, $jsonResponse->traceId);
                }

                if ($jsonResponse->name === 'InvalidParameterError') {
                    throw new InvalidParameterError($jsonResponse->message, $jsonResponse->details, $jsonResponse->traceId);
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 202:
                    if ('\AffinidiTdk\Clients\VaultDataManagerClient\Model\MoveNodeDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AffinidiTdk\Clients\VaultDataManagerClient\Model\MoveNodeDto' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AffinidiTdk\Clients\VaultDataManagerClient\Model\MoveNodeDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\AffinidiTdk\Clients\VaultDataManagerClient\Model\MoveNodeDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AffinidiTdk\Clients\VaultDataManagerClient\Model\MoveNodeDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation moveNodeAsync
     *
     * @param  string $node_id (required)
     * @param  \AffinidiTdk\Clients\VaultDataManagerClient\Model\MoveNodeInput $move_node_input MoveNode (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['moveNode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function moveNodeAsync($node_id, $move_node_input, string $contentType = self::contentTypes['moveNode'][0])
    {
        return $this->moveNodeAsyncWithHttpInfo($node_id, $move_node_input, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation moveNodeAsyncWithHttpInfo
     *
     * @param  string $node_id (required)
     * @param  \AffinidiTdk\Clients\VaultDataManagerClient\Model\MoveNodeInput $move_node_input MoveNode (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['moveNode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function moveNodeAsyncWithHttpInfo($node_id, $move_node_input, string $contentType = self::contentTypes['moveNode'][0])
    {
        $returnType = '\AffinidiTdk\Clients\VaultDataManagerClient\Model\MoveNodeDto';
        $request = $this->moveNodeRequest($node_id, $move_node_input, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'moveNode'
     *
     * @param  string $node_id (required)
     * @param  \AffinidiTdk\Clients\VaultDataManagerClient\Model\MoveNodeInput $move_node_input MoveNode (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['moveNode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function moveNodeRequest($node_id, $move_node_input, string $contentType = self::contentTypes['moveNode'][0])
    {

        // verify the required parameter 'node_id' is set
        if ($node_id === null || (is_array($node_id) && count($node_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $node_id when calling moveNode'
            );
        }
        if (!preg_match("/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/", $node_id)) {
            throw new \InvalidArgumentException("invalid value for \"node_id\" when calling NodesApi.moveNode, must conform to the pattern /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/.");
        }
        
        // verify the required parameter 'move_node_input' is set
        if ($move_node_input === null || (is_array($move_node_input) && count($move_node_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $move_node_input when calling moveNode'
            );
        }


        $resourcePath = '/v1/nodes/{nodeId}/move';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($node_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nodeId' . '}',
                ObjectSerializer::toPathValue($node_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($move_node_input)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($move_node_input));
            } else {
                $httpBody = $move_node_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('authorization');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation permanentlyDeleteNode
     *
     * @param  string $node_id nodeId of the TRASH_BIN (required)
     * @param  string $node_id_to_remove nodeId of the node to be deleted from TRASH_BIN (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['permanentlyDeleteNode'] to see the possible values for this operation
     *
     * @throws \AffinidiTdk\Clients\VaultDataManagerClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function permanentlyDeleteNode($node_id, $node_id_to_remove, string $contentType = self::contentTypes['permanentlyDeleteNode'][0])
    {
        $this->permanentlyDeleteNodeWithHttpInfo($node_id, $node_id_to_remove, $contentType);
    }

    /**
     * Operation permanentlyDeleteNodeWithHttpInfo
     *
     * @param  string $node_id nodeId of the TRASH_BIN (required)
     * @param  string $node_id_to_remove nodeId of the node to be deleted from TRASH_BIN (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['permanentlyDeleteNode'] to see the possible values for this operation
     *
     * @throws \AffinidiTdk\Clients\VaultDataManagerClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function permanentlyDeleteNodeWithHttpInfo($node_id, $node_id_to_remove, string $contentType = self::contentTypes['permanentlyDeleteNode'][0])
    {
        $request = $this->permanentlyDeleteNodeRequest($node_id, $node_id_to_remove, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $jsonResponse = json_decode($e->getResponse()->getBody());
                if ($jsonResponse->name === 'InvalidJwtTokenError') {
                    $issue = $jsonResponse->details[0]->issue;
                    throw new InvalidJwtTokenError($issue, $jsonResponse->traceId);
                }

                if ($jsonResponse->name === 'NotFoundError') {
                    throw new NotFoundError($jsonResponse->message, $jsonResponse->traceId);
                }

                if ($jsonResponse->name === 'InvalidParameterError') {
                    throw new InvalidParameterError($jsonResponse->message, $jsonResponse->details, $jsonResponse->traceId);
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation permanentlyDeleteNodeAsync
     *
     * @param  string $node_id nodeId of the TRASH_BIN (required)
     * @param  string $node_id_to_remove nodeId of the node to be deleted from TRASH_BIN (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['permanentlyDeleteNode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function permanentlyDeleteNodeAsync($node_id, $node_id_to_remove, string $contentType = self::contentTypes['permanentlyDeleteNode'][0])
    {
        return $this->permanentlyDeleteNodeAsyncWithHttpInfo($node_id, $node_id_to_remove, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation permanentlyDeleteNodeAsyncWithHttpInfo
     *
     * @param  string $node_id nodeId of the TRASH_BIN (required)
     * @param  string $node_id_to_remove nodeId of the node to be deleted from TRASH_BIN (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['permanentlyDeleteNode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function permanentlyDeleteNodeAsyncWithHttpInfo($node_id, $node_id_to_remove, string $contentType = self::contentTypes['permanentlyDeleteNode'][0])
    {
        $returnType = '';
        $request = $this->permanentlyDeleteNodeRequest($node_id, $node_id_to_remove, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'permanentlyDeleteNode'
     *
     * @param  string $node_id nodeId of the TRASH_BIN (required)
     * @param  string $node_id_to_remove nodeId of the node to be deleted from TRASH_BIN (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['permanentlyDeleteNode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function permanentlyDeleteNodeRequest($node_id, $node_id_to_remove, string $contentType = self::contentTypes['permanentlyDeleteNode'][0])
    {

        // verify the required parameter 'node_id' is set
        if ($node_id === null || (is_array($node_id) && count($node_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $node_id when calling permanentlyDeleteNode'
            );
        }
        if (!preg_match("/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/", $node_id)) {
            throw new \InvalidArgumentException("invalid value for \"node_id\" when calling NodesApi.permanentlyDeleteNode, must conform to the pattern /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/.");
        }
        
        // verify the required parameter 'node_id_to_remove' is set
        if ($node_id_to_remove === null || (is_array($node_id_to_remove) && count($node_id_to_remove) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $node_id_to_remove when calling permanentlyDeleteNode'
            );
        }
        if (!preg_match("/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/", $node_id_to_remove)) {
            throw new \InvalidArgumentException("invalid value for \"node_id_to_remove\" when calling NodesApi.permanentlyDeleteNode, must conform to the pattern /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/.");
        }
        

        $resourcePath = '/v1/nodes/{nodeId}/remove/{nodeIdToRemove}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($node_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nodeId' . '}',
                ObjectSerializer::toPathValue($node_id),
                $resourcePath
            );
        }
        // path params
        if ($node_id_to_remove !== null) {
            $resourcePath = str_replace(
                '{' . 'nodeIdToRemove' . '}',
                ObjectSerializer::toPathValue($node_id_to_remove),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('authorization');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation restoreNodeFromTrashbin
     *
     * @param  string $node_id nodeId of the TRASH_BIN (required)
     * @param  string $node_id_to_restore nodeId of the node to be restored from TRASH_BIN (required)
     * @param  \AffinidiTdk\Clients\VaultDataManagerClient\Model\RestoreNodeFromTrashbin $restore_node_from_trashbin RestoreNodeFromTrashbin (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restoreNodeFromTrashbin'] to see the possible values for this operation
     *
     * @throws \AffinidiTdk\Clients\VaultDataManagerClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \AffinidiTdk\Clients\VaultDataManagerClient\Model\MoveNodeDto|\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError
     */
    public function restoreNodeFromTrashbin($node_id, $node_id_to_restore, $restore_node_from_trashbin, string $contentType = self::contentTypes['restoreNodeFromTrashbin'][0])
    {
        list($response) = $this->restoreNodeFromTrashbinWithHttpInfo($node_id, $node_id_to_restore, $restore_node_from_trashbin, $contentType);
        return $response;
    }

    /**
     * Operation restoreNodeFromTrashbinWithHttpInfo
     *
     * @param  string $node_id nodeId of the TRASH_BIN (required)
     * @param  string $node_id_to_restore nodeId of the node to be restored from TRASH_BIN (required)
     * @param  \AffinidiTdk\Clients\VaultDataManagerClient\Model\RestoreNodeFromTrashbin $restore_node_from_trashbin RestoreNodeFromTrashbin (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restoreNodeFromTrashbin'] to see the possible values for this operation
     *
     * @throws \AffinidiTdk\Clients\VaultDataManagerClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \AffinidiTdk\Clients\VaultDataManagerClient\Model\MoveNodeDto|\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError, HTTP status code, HTTP response headers (array of strings)
     */
    public function restoreNodeFromTrashbinWithHttpInfo($node_id, $node_id_to_restore, $restore_node_from_trashbin, string $contentType = self::contentTypes['restoreNodeFromTrashbin'][0])
    {
        $request = $this->restoreNodeFromTrashbinRequest($node_id, $node_id_to_restore, $restore_node_from_trashbin, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $jsonResponse = json_decode($e->getResponse()->getBody());
                if ($jsonResponse->name === 'InvalidJwtTokenError') {
                    $issue = $jsonResponse->details[0]->issue;
                    throw new InvalidJwtTokenError($issue, $jsonResponse->traceId);
                }

                if ($jsonResponse->name === 'NotFoundError') {
                    throw new NotFoundError($jsonResponse->message, $jsonResponse->traceId);
                }

                if ($jsonResponse->name === 'InvalidParameterError') {
                    throw new InvalidParameterError($jsonResponse->message, $jsonResponse->details, $jsonResponse->traceId);
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 202:
                    if ('\AffinidiTdk\Clients\VaultDataManagerClient\Model\MoveNodeDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AffinidiTdk\Clients\VaultDataManagerClient\Model\MoveNodeDto' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AffinidiTdk\Clients\VaultDataManagerClient\Model\MoveNodeDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\AffinidiTdk\Clients\VaultDataManagerClient\Model\MoveNodeDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AffinidiTdk\Clients\VaultDataManagerClient\Model\MoveNodeDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation restoreNodeFromTrashbinAsync
     *
     * @param  string $node_id nodeId of the TRASH_BIN (required)
     * @param  string $node_id_to_restore nodeId of the node to be restored from TRASH_BIN (required)
     * @param  \AffinidiTdk\Clients\VaultDataManagerClient\Model\RestoreNodeFromTrashbin $restore_node_from_trashbin RestoreNodeFromTrashbin (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restoreNodeFromTrashbin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restoreNodeFromTrashbinAsync($node_id, $node_id_to_restore, $restore_node_from_trashbin, string $contentType = self::contentTypes['restoreNodeFromTrashbin'][0])
    {
        return $this->restoreNodeFromTrashbinAsyncWithHttpInfo($node_id, $node_id_to_restore, $restore_node_from_trashbin, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation restoreNodeFromTrashbinAsyncWithHttpInfo
     *
     * @param  string $node_id nodeId of the TRASH_BIN (required)
     * @param  string $node_id_to_restore nodeId of the node to be restored from TRASH_BIN (required)
     * @param  \AffinidiTdk\Clients\VaultDataManagerClient\Model\RestoreNodeFromTrashbin $restore_node_from_trashbin RestoreNodeFromTrashbin (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restoreNodeFromTrashbin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function restoreNodeFromTrashbinAsyncWithHttpInfo($node_id, $node_id_to_restore, $restore_node_from_trashbin, string $contentType = self::contentTypes['restoreNodeFromTrashbin'][0])
    {
        $returnType = '\AffinidiTdk\Clients\VaultDataManagerClient\Model\MoveNodeDto';
        $request = $this->restoreNodeFromTrashbinRequest($node_id, $node_id_to_restore, $restore_node_from_trashbin, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'restoreNodeFromTrashbin'
     *
     * @param  string $node_id nodeId of the TRASH_BIN (required)
     * @param  string $node_id_to_restore nodeId of the node to be restored from TRASH_BIN (required)
     * @param  \AffinidiTdk\Clients\VaultDataManagerClient\Model\RestoreNodeFromTrashbin $restore_node_from_trashbin RestoreNodeFromTrashbin (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['restoreNodeFromTrashbin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function restoreNodeFromTrashbinRequest($node_id, $node_id_to_restore, $restore_node_from_trashbin, string $contentType = self::contentTypes['restoreNodeFromTrashbin'][0])
    {

        // verify the required parameter 'node_id' is set
        if ($node_id === null || (is_array($node_id) && count($node_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $node_id when calling restoreNodeFromTrashbin'
            );
        }
        if (!preg_match("/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/", $node_id)) {
            throw new \InvalidArgumentException("invalid value for \"node_id\" when calling NodesApi.restoreNodeFromTrashbin, must conform to the pattern /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/.");
        }
        
        // verify the required parameter 'node_id_to_restore' is set
        if ($node_id_to_restore === null || (is_array($node_id_to_restore) && count($node_id_to_restore) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $node_id_to_restore when calling restoreNodeFromTrashbin'
            );
        }
        if (!preg_match("/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/", $node_id_to_restore)) {
            throw new \InvalidArgumentException("invalid value for \"node_id_to_restore\" when calling NodesApi.restoreNodeFromTrashbin, must conform to the pattern /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/.");
        }
        
        // verify the required parameter 'restore_node_from_trashbin' is set
        if ($restore_node_from_trashbin === null || (is_array($restore_node_from_trashbin) && count($restore_node_from_trashbin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $restore_node_from_trashbin when calling restoreNodeFromTrashbin'
            );
        }


        $resourcePath = '/v1/nodes/{nodeId}/restore/{nodeIdToRestore}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($node_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nodeId' . '}',
                ObjectSerializer::toPathValue($node_id),
                $resourcePath
            );
        }
        // path params
        if ($node_id_to_restore !== null) {
            $resourcePath = str_replace(
                '{' . 'nodeIdToRestore' . '}',
                ObjectSerializer::toPathValue($node_id_to_restore),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($restore_node_from_trashbin)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($restore_node_from_trashbin));
            } else {
                $httpBody = $restore_node_from_trashbin;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('authorization');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateNode
     *
     * @param  string $node_id Description for nodeId. (required)
     * @param  \AffinidiTdk\Clients\VaultDataManagerClient\Model\UpdateNodeInput $update_node_input UpdateNodeInput (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNode'] to see the possible values for this operation
     *
     * @throws \AffinidiTdk\Clients\VaultDataManagerClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \AffinidiTdk\Clients\VaultDataManagerClient\Model\NodeDto|\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError
     */
    public function updateNode($node_id, $update_node_input, string $contentType = self::contentTypes['updateNode'][0])
    {
        list($response) = $this->updateNodeWithHttpInfo($node_id, $update_node_input, $contentType);
        return $response;
    }

    /**
     * Operation updateNodeWithHttpInfo
     *
     * @param  string $node_id Description for nodeId. (required)
     * @param  \AffinidiTdk\Clients\VaultDataManagerClient\Model\UpdateNodeInput $update_node_input UpdateNodeInput (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNode'] to see the possible values for this operation
     *
     * @throws \AffinidiTdk\Clients\VaultDataManagerClient\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \AffinidiTdk\Clients\VaultDataManagerClient\Model\NodeDto|\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateNodeWithHttpInfo($node_id, $update_node_input, string $contentType = self::contentTypes['updateNode'][0])
    {
        $request = $this->updateNodeRequest($node_id, $update_node_input, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $jsonResponse = json_decode($e->getResponse()->getBody());
                if ($jsonResponse->name === 'InvalidJwtTokenError') {
                    $issue = $jsonResponse->details[0]->issue;
                    throw new InvalidJwtTokenError($issue, $jsonResponse->traceId);
                }

                if ($jsonResponse->name === 'NotFoundError') {
                    throw new NotFoundError($jsonResponse->message, $jsonResponse->traceId);
                }

                if ($jsonResponse->name === 'InvalidParameterError') {
                    throw new InvalidParameterError($jsonResponse->message, $jsonResponse->details, $jsonResponse->traceId);
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\AffinidiTdk\Clients\VaultDataManagerClient\Model\NodeDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AffinidiTdk\Clients\VaultDataManagerClient\Model\NodeDto' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AffinidiTdk\Clients\VaultDataManagerClient\Model\NodeDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\AffinidiTdk\Clients\VaultDataManagerClient\Model\NodeDto';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AffinidiTdk\Clients\VaultDataManagerClient\Model\NodeDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\AffinidiTdk\Clients\VaultDataManagerClient\Model\InvalidParameterError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateNodeAsync
     *
     * @param  string $node_id Description for nodeId. (required)
     * @param  \AffinidiTdk\Clients\VaultDataManagerClient\Model\UpdateNodeInput $update_node_input UpdateNodeInput (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNodeAsync($node_id, $update_node_input, string $contentType = self::contentTypes['updateNode'][0])
    {
        return $this->updateNodeAsyncWithHttpInfo($node_id, $update_node_input, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateNodeAsyncWithHttpInfo
     *
     * @param  string $node_id Description for nodeId. (required)
     * @param  \AffinidiTdk\Clients\VaultDataManagerClient\Model\UpdateNodeInput $update_node_input UpdateNodeInput (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNodeAsyncWithHttpInfo($node_id, $update_node_input, string $contentType = self::contentTypes['updateNode'][0])
    {
        $returnType = '\AffinidiTdk\Clients\VaultDataManagerClient\Model\NodeDto';
        $request = $this->updateNodeRequest($node_id, $update_node_input, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateNode'
     *
     * @param  string $node_id Description for nodeId. (required)
     * @param  \AffinidiTdk\Clients\VaultDataManagerClient\Model\UpdateNodeInput $update_node_input UpdateNodeInput (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateNodeRequest($node_id, $update_node_input, string $contentType = self::contentTypes['updateNode'][0])
    {

        // verify the required parameter 'node_id' is set
        if ($node_id === null || (is_array($node_id) && count($node_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $node_id when calling updateNode'
            );
        }

        // verify the required parameter 'update_node_input' is set
        if ($update_node_input === null || (is_array($update_node_input) && count($update_node_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_node_input when calling updateNode'
            );
        }


        $resourcePath = '/v1/nodes/{nodeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($node_id !== null) {
            $resourcePath = str_replace(
                '{' . 'nodeId' . '}',
                ObjectSerializer::toPathValue($node_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_node_input)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_node_input));
            } else {
                $httpBody = $update_node_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('authorization');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
