<?php
/**
 * ConsumerMetadataDto
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  AffinidiTdk\Clients\VaultDataManagerClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * VaultFileSystem
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AffinidiTdk\Clients\VaultDataManagerClient\Model;

use \ArrayAccess;
use \AffinidiTdk\Clients\VaultDataManagerClient\ObjectSerializer;

/**
 * ConsumerMetadataDto Class Doc Comment
 *
 * @category Class
 * @package  AffinidiTdk\Clients\VaultDataManagerClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ConsumerMetadataDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ConsumerMetadataDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'node_id' => 'string',
        'status' => '\AffinidiTdk\Clients\VaultDataManagerClient\Model\NodeStatus',
        'file_count' => 'float',
        'folder_count' => 'float',
        'profile_count' => 'float',
        'name' => 'string',
        'consumer_id' => 'string',
        'created_at' => 'string',
        'modified_at' => 'string',
        'created_by' => 'string',
        'modified_by' => 'string',
        'description' => 'string',
        'type' => '\AffinidiTdk\Clients\VaultDataManagerClient\Model\NodeType',
        'consumed_file_storage' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'node_id' => null,
        'status' => null,
        'file_count' => null,
        'folder_count' => null,
        'profile_count' => null,
        'name' => null,
        'consumer_id' => null,
        'created_at' => null,
        'modified_at' => null,
        'created_by' => null,
        'modified_by' => null,
        'description' => null,
        'type' => null,
        'consumed_file_storage' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'node_id' => false,
        'status' => false,
        'file_count' => false,
        'folder_count' => false,
        'profile_count' => false,
        'name' => false,
        'consumer_id' => false,
        'created_at' => false,
        'modified_at' => false,
        'created_by' => false,
        'modified_by' => false,
        'description' => false,
        'type' => false,
        'consumed_file_storage' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'node_id' => 'nodeId',
        'status' => 'status',
        'file_count' => 'fileCount',
        'folder_count' => 'folderCount',
        'profile_count' => 'profileCount',
        'name' => 'name',
        'consumer_id' => 'consumerId',
        'created_at' => 'createdAt',
        'modified_at' => 'modifiedAt',
        'created_by' => 'createdBy',
        'modified_by' => 'modifiedBy',
        'description' => 'description',
        'type' => 'type',
        'consumed_file_storage' => 'consumedFileStorage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'node_id' => 'setNodeId',
        'status' => 'setStatus',
        'file_count' => 'setFileCount',
        'folder_count' => 'setFolderCount',
        'profile_count' => 'setProfileCount',
        'name' => 'setName',
        'consumer_id' => 'setConsumerId',
        'created_at' => 'setCreatedAt',
        'modified_at' => 'setModifiedAt',
        'created_by' => 'setCreatedBy',
        'modified_by' => 'setModifiedBy',
        'description' => 'setDescription',
        'type' => 'setType',
        'consumed_file_storage' => 'setConsumedFileStorage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'node_id' => 'getNodeId',
        'status' => 'getStatus',
        'file_count' => 'getFileCount',
        'folder_count' => 'getFolderCount',
        'profile_count' => 'getProfileCount',
        'name' => 'getName',
        'consumer_id' => 'getConsumerId',
        'created_at' => 'getCreatedAt',
        'modified_at' => 'getModifiedAt',
        'created_by' => 'getCreatedBy',
        'modified_by' => 'getModifiedBy',
        'description' => 'getDescription',
        'type' => 'getType',
        'consumed_file_storage' => 'getConsumedFileStorage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('node_id', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('file_count', $data ?? [], null);
        $this->setIfExists('folder_count', $data ?? [], null);
        $this->setIfExists('profile_count', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('consumer_id', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('modified_at', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('modified_by', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('consumed_file_storage', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['node_id'] === null) {
            $invalidProperties[] = "'node_id' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['consumer_id'] === null) {
            $invalidProperties[] = "'consumer_id' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['modified_at'] === null) {
            $invalidProperties[] = "'modified_at' can't be null";
        }
        if ($this->container['created_by'] === null) {
            $invalidProperties[] = "'created_by' can't be null";
        }
        if ($this->container['modified_by'] === null) {
            $invalidProperties[] = "'modified_by' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['consumed_file_storage'] === null) {
            $invalidProperties[] = "'consumed_file_storage' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets node_id
     *
     * @return string
     */
    public function getNodeId()
    {
        return $this->container['node_id'];
    }

    /**
     * Sets node_id
     *
     * @param string $node_id node_id
     *
     * @return self
     */
    public function setNodeId($node_id)
    {
        if (is_null($node_id)) {
            throw new \InvalidArgumentException('non-nullable node_id cannot be null');
        }
        $this->container['node_id'] = $node_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \AffinidiTdk\Clients\VaultDataManagerClient\Model\NodeStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \AffinidiTdk\Clients\VaultDataManagerClient\Model\NodeStatus $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets file_count
     *
     * @return float|null
     */
    public function getFileCount()
    {
        return $this->container['file_count'];
    }

    /**
     * Sets file_count
     *
     * @param float|null $file_count file_count
     *
     * @return self
     */
    public function setFileCount($file_count)
    {
        if (is_null($file_count)) {
            throw new \InvalidArgumentException('non-nullable file_count cannot be null');
        }
        $this->container['file_count'] = $file_count;

        return $this;
    }

    /**
     * Gets folder_count
     *
     * @return float|null
     */
    public function getFolderCount()
    {
        return $this->container['folder_count'];
    }

    /**
     * Sets folder_count
     *
     * @param float|null $folder_count folder_count
     *
     * @return self
     */
    public function setFolderCount($folder_count)
    {
        if (is_null($folder_count)) {
            throw new \InvalidArgumentException('non-nullable folder_count cannot be null');
        }
        $this->container['folder_count'] = $folder_count;

        return $this;
    }

    /**
     * Gets profile_count
     *
     * @return float|null
     */
    public function getProfileCount()
    {
        return $this->container['profile_count'];
    }

    /**
     * Sets profile_count
     *
     * @param float|null $profile_count profile_count
     *
     * @return self
     */
    public function setProfileCount($profile_count)
    {
        if (is_null($profile_count)) {
            throw new \InvalidArgumentException('non-nullable profile_count cannot be null');
        }
        $this->container['profile_count'] = $profile_count;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets consumer_id
     *
     * @return string
     */
    public function getConsumerId()
    {
        return $this->container['consumer_id'];
    }

    /**
     * Sets consumer_id
     *
     * @param string $consumer_id consumer_id
     *
     * @return self
     */
    public function setConsumerId($consumer_id)
    {
        if (is_null($consumer_id)) {
            throw new \InvalidArgumentException('non-nullable consumer_id cannot be null');
        }
        $this->container['consumer_id'] = $consumer_id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at creation date/time
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets modified_at
     *
     * @return string
     */
    public function getModifiedAt()
    {
        return $this->container['modified_at'];
    }

    /**
     * Sets modified_at
     *
     * @param string $modified_at modification date/time
     *
     * @return self
     */
    public function setModifiedAt($modified_at)
    {
        if (is_null($modified_at)) {
            throw new \InvalidArgumentException('non-nullable modified_at cannot be null');
        }
        $this->container['modified_at'] = $modified_at;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string $created_by Identifier of the user who created
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            throw new \InvalidArgumentException('non-nullable created_by cannot be null');
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets modified_by
     *
     * @return string
     */
    public function getModifiedBy()
    {
        return $this->container['modified_by'];
    }

    /**
     * Sets modified_by
     *
     * @param string $modified_by Identifier of the user who last updated
     *
     * @return self
     */
    public function setModifiedBy($modified_by)
    {
        if (is_null($modified_by)) {
            throw new \InvalidArgumentException('non-nullable modified_by cannot be null');
        }
        $this->container['modified_by'] = $modified_by;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description of the node
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \AffinidiTdk\Clients\VaultDataManagerClient\Model\NodeType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \AffinidiTdk\Clients\VaultDataManagerClient\Model\NodeType $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets consumed_file_storage
     *
     * @return float
     */
    public function getConsumedFileStorage()
    {
        return $this->container['consumed_file_storage'];
    }

    /**
     * Sets consumed_file_storage
     *
     * @param float $consumed_file_storage Tracks the amount of bytes used by the stored data.
     *
     * @return self
     */
    public function setConsumedFileStorage($consumed_file_storage)
    {
        if (is_null($consumed_file_storage)) {
            throw new \InvalidArgumentException('non-nullable consumed_file_storage cannot be null');
        }
        $this->container['consumed_file_storage'] = $consumed_file_storage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


