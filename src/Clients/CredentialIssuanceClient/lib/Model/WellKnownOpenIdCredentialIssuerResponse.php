<?php
/**
 * WellKnownOpenIdCredentialIssuerResponse
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  AffinidiTdk\Clients\CredentialIssuanceClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CredentialIssuanceService
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@affinidi.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AffinidiTdk\Clients\CredentialIssuanceClient\Model;

use \ArrayAccess;
use \AffinidiTdk\Clients\CredentialIssuanceClient\ObjectSerializer;

/**
 * WellKnownOpenIdCredentialIssuerResponse Class Doc Comment
 *
 * @category Class
 * @package  AffinidiTdk\Clients\CredentialIssuanceClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WellKnownOpenIdCredentialIssuerResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'WellKnownOpenIdCredentialIssuerResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'authorization_endpoint' => 'string',
        'credential_endpoint' => 'string',
        'credential_issuer' => 'string',
        'batch_credential_endpoint' => 'string',
        'credentials_supported' => '\AffinidiTdk\Clients\CredentialIssuanceClient\Model\WellKnownOpenIdCredentialIssuerResponseCredentialsSupportedInner[]',
        'credential_configurations_supported' => 'object[]',
        'deferred_credential_endpoint' => 'string',
        'grant_types_supported' => 'string[]',
        'jwks_uri' => 'string',
        'display' => '\AffinidiTdk\Clients\CredentialIssuanceClient\Model\WellKnownOpenIdCredentialIssuerResponseDisplay',
        'scopes_supported' => 'string[]',
        'token_endpoint' => 'string',
        'token_endpoint_auth_methods_supported' => 'string[]',
        'return_uris' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'authorization_endpoint' => null,
        'credential_endpoint' => null,
        'credential_issuer' => null,
        'batch_credential_endpoint' => null,
        'credentials_supported' => null,
        'credential_configurations_supported' => null,
        'deferred_credential_endpoint' => null,
        'grant_types_supported' => null,
        'jwks_uri' => null,
        'display' => null,
        'scopes_supported' => null,
        'token_endpoint' => null,
        'token_endpoint_auth_methods_supported' => null,
        'return_uris' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'authorization_endpoint' => false,
        'credential_endpoint' => false,
        'credential_issuer' => false,
        'batch_credential_endpoint' => false,
        'credentials_supported' => false,
        'credential_configurations_supported' => false,
        'deferred_credential_endpoint' => false,
        'grant_types_supported' => false,
        'jwks_uri' => false,
        'display' => false,
        'scopes_supported' => false,
        'token_endpoint' => false,
        'token_endpoint_auth_methods_supported' => false,
        'return_uris' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'authorization_endpoint' => 'authorization_endpoint',
        'credential_endpoint' => 'credential_endpoint',
        'credential_issuer' => 'credential_issuer',
        'batch_credential_endpoint' => 'batch_credential_endpoint',
        'credentials_supported' => 'credentials_supported',
        'credential_configurations_supported' => 'credential_configurations_supported',
        'deferred_credential_endpoint' => 'deferred_credential_endpoint',
        'grant_types_supported' => 'grant_types_supported',
        'jwks_uri' => 'jwks_uri',
        'display' => 'display',
        'scopes_supported' => 'scopes_supported',
        'token_endpoint' => 'token_endpoint',
        'token_endpoint_auth_methods_supported' => 'token_endpoint_auth_methods_supported',
        'return_uris' => 'return_uris'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'authorization_endpoint' => 'setAuthorizationEndpoint',
        'credential_endpoint' => 'setCredentialEndpoint',
        'credential_issuer' => 'setCredentialIssuer',
        'batch_credential_endpoint' => 'setBatchCredentialEndpoint',
        'credentials_supported' => 'setCredentialsSupported',
        'credential_configurations_supported' => 'setCredentialConfigurationsSupported',
        'deferred_credential_endpoint' => 'setDeferredCredentialEndpoint',
        'grant_types_supported' => 'setGrantTypesSupported',
        'jwks_uri' => 'setJwksUri',
        'display' => 'setDisplay',
        'scopes_supported' => 'setScopesSupported',
        'token_endpoint' => 'setTokenEndpoint',
        'token_endpoint_auth_methods_supported' => 'setTokenEndpointAuthMethodsSupported',
        'return_uris' => 'setReturnUris'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'authorization_endpoint' => 'getAuthorizationEndpoint',
        'credential_endpoint' => 'getCredentialEndpoint',
        'credential_issuer' => 'getCredentialIssuer',
        'batch_credential_endpoint' => 'getBatchCredentialEndpoint',
        'credentials_supported' => 'getCredentialsSupported',
        'credential_configurations_supported' => 'getCredentialConfigurationsSupported',
        'deferred_credential_endpoint' => 'getDeferredCredentialEndpoint',
        'grant_types_supported' => 'getGrantTypesSupported',
        'jwks_uri' => 'getJwksUri',
        'display' => 'getDisplay',
        'scopes_supported' => 'getScopesSupported',
        'token_endpoint' => 'getTokenEndpoint',
        'token_endpoint_auth_methods_supported' => 'getTokenEndpointAuthMethodsSupported',
        'return_uris' => 'getReturnUris'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const GRANT_TYPES_SUPPORTED_AUTHORIZATION_CODE = 'authorization_code';
    public const GRANT_TYPES_SUPPORTED_URN_IETF_PARAMS_OAUTH_GRANT_TYPE_PRE_AUTHORIZED_CODE = 'urn:ietf:params:oauth:grant-type:pre-authorized_code';
    public const SCOPES_SUPPORTED_OPENID = 'openid';
    public const TOKEN_ENDPOINT_AUTH_METHODS_SUPPORTED_CLIENT_SECRET_POST = 'client_secret_post';
    public const TOKEN_ENDPOINT_AUTH_METHODS_SUPPORTED_CLIENT_SECRET_BASIC = 'client_secret_basic';
    public const TOKEN_ENDPOINT_AUTH_METHODS_SUPPORTED_NONE = 'none';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGrantTypesSupportedAllowableValues()
    {
        return [
            self::GRANT_TYPES_SUPPORTED_AUTHORIZATION_CODE,
            self::GRANT_TYPES_SUPPORTED_URN_IETF_PARAMS_OAUTH_GRANT_TYPE_PRE_AUTHORIZED_CODE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScopesSupportedAllowableValues()
    {
        return [
            self::SCOPES_SUPPORTED_OPENID,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTokenEndpointAuthMethodsSupportedAllowableValues()
    {
        return [
            self::TOKEN_ENDPOINT_AUTH_METHODS_SUPPORTED_CLIENT_SECRET_POST,
            self::TOKEN_ENDPOINT_AUTH_METHODS_SUPPORTED_CLIENT_SECRET_BASIC,
            self::TOKEN_ENDPOINT_AUTH_METHODS_SUPPORTED_NONE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('authorization_endpoint', $data ?? [], null);
        $this->setIfExists('credential_endpoint', $data ?? [], null);
        $this->setIfExists('credential_issuer', $data ?? [], null);
        $this->setIfExists('batch_credential_endpoint', $data ?? [], null);
        $this->setIfExists('credentials_supported', $data ?? [], null);
        $this->setIfExists('credential_configurations_supported', $data ?? [], null);
        $this->setIfExists('deferred_credential_endpoint', $data ?? [], null);
        $this->setIfExists('grant_types_supported', $data ?? [], null);
        $this->setIfExists('jwks_uri', $data ?? [], null);
        $this->setIfExists('display', $data ?? [], null);
        $this->setIfExists('scopes_supported', $data ?? [], null);
        $this->setIfExists('token_endpoint', $data ?? [], null);
        $this->setIfExists('token_endpoint_auth_methods_supported', $data ?? [], null);
        $this->setIfExists('return_uris', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets authorization_endpoint
     *
     * @return string|null
     */
    public function getAuthorizationEndpoint()
    {
        return $this->container['authorization_endpoint'];
    }

    /**
     * Sets authorization_endpoint
     *
     * @param string|null $authorization_endpoint authorization_endpoint
     *
     * @return self
     */
    public function setAuthorizationEndpoint($authorization_endpoint)
    {
        if (is_null($authorization_endpoint)) {
            throw new \InvalidArgumentException('non-nullable authorization_endpoint cannot be null');
        }
        $this->container['authorization_endpoint'] = $authorization_endpoint;

        return $this;
    }

    /**
     * Gets credential_endpoint
     *
     * @return string|null
     */
    public function getCredentialEndpoint()
    {
        return $this->container['credential_endpoint'];
    }

    /**
     * Sets credential_endpoint
     *
     * @param string|null $credential_endpoint credential_endpoint
     *
     * @return self
     */
    public function setCredentialEndpoint($credential_endpoint)
    {
        if (is_null($credential_endpoint)) {
            throw new \InvalidArgumentException('non-nullable credential_endpoint cannot be null');
        }
        $this->container['credential_endpoint'] = $credential_endpoint;

        return $this;
    }

    /**
     * Gets credential_issuer
     *
     * @return string|null
     */
    public function getCredentialIssuer()
    {
        return $this->container['credential_issuer'];
    }

    /**
     * Sets credential_issuer
     *
     * @param string|null $credential_issuer credential_issuer
     *
     * @return self
     */
    public function setCredentialIssuer($credential_issuer)
    {
        if (is_null($credential_issuer)) {
            throw new \InvalidArgumentException('non-nullable credential_issuer cannot be null');
        }
        $this->container['credential_issuer'] = $credential_issuer;

        return $this;
    }

    /**
     * Gets batch_credential_endpoint
     *
     * @return string|null
     */
    public function getBatchCredentialEndpoint()
    {
        return $this->container['batch_credential_endpoint'];
    }

    /**
     * Sets batch_credential_endpoint
     *
     * @param string|null $batch_credential_endpoint batch_credential_endpoint
     *
     * @return self
     */
    public function setBatchCredentialEndpoint($batch_credential_endpoint)
    {
        if (is_null($batch_credential_endpoint)) {
            throw new \InvalidArgumentException('non-nullable batch_credential_endpoint cannot be null');
        }
        $this->container['batch_credential_endpoint'] = $batch_credential_endpoint;

        return $this;
    }

    /**
     * Gets credentials_supported
     *
     * @return \AffinidiTdk\Clients\CredentialIssuanceClient\Model\WellKnownOpenIdCredentialIssuerResponseCredentialsSupportedInner[]|null
     */
    public function getCredentialsSupported()
    {
        return $this->container['credentials_supported'];
    }

    /**
     * Sets credentials_supported
     *
     * @param \AffinidiTdk\Clients\CredentialIssuanceClient\Model\WellKnownOpenIdCredentialIssuerResponseCredentialsSupportedInner[]|null $credentials_supported credentials_supported
     *
     * @return self
     */
    public function setCredentialsSupported($credentials_supported)
    {
        if (is_null($credentials_supported)) {
            throw new \InvalidArgumentException('non-nullable credentials_supported cannot be null');
        }
        $this->container['credentials_supported'] = $credentials_supported;

        return $this;
    }

    /**
     * Gets credential_configurations_supported
     *
     * @return object[]|null
     */
    public function getCredentialConfigurationsSupported()
    {
        return $this->container['credential_configurations_supported'];
    }

    /**
     * Sets credential_configurations_supported
     *
     * @param object[]|null $credential_configurations_supported credential_configurations_supported
     *
     * @return self
     */
    public function setCredentialConfigurationsSupported($credential_configurations_supported)
    {
        if (is_null($credential_configurations_supported)) {
            throw new \InvalidArgumentException('non-nullable credential_configurations_supported cannot be null');
        }
        $this->container['credential_configurations_supported'] = $credential_configurations_supported;

        return $this;
    }

    /**
     * Gets deferred_credential_endpoint
     *
     * @return string|null
     */
    public function getDeferredCredentialEndpoint()
    {
        return $this->container['deferred_credential_endpoint'];
    }

    /**
     * Sets deferred_credential_endpoint
     *
     * @param string|null $deferred_credential_endpoint deferred_credential_endpoint
     *
     * @return self
     */
    public function setDeferredCredentialEndpoint($deferred_credential_endpoint)
    {
        if (is_null($deferred_credential_endpoint)) {
            throw new \InvalidArgumentException('non-nullable deferred_credential_endpoint cannot be null');
        }
        $this->container['deferred_credential_endpoint'] = $deferred_credential_endpoint;

        return $this;
    }

    /**
     * Gets grant_types_supported
     *
     * @return string[]|null
     */
    public function getGrantTypesSupported()
    {
        return $this->container['grant_types_supported'];
    }

    /**
     * Sets grant_types_supported
     *
     * @param string[]|null $grant_types_supported grant_types_supported
     *
     * @return self
     */
    public function setGrantTypesSupported($grant_types_supported)
    {
        if (is_null($grant_types_supported)) {
            throw new \InvalidArgumentException('non-nullable grant_types_supported cannot be null');
        }
        $allowedValues = $this->getGrantTypesSupportedAllowableValues();
        if (array_diff($grant_types_supported, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'grant_types_supported', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['grant_types_supported'] = $grant_types_supported;

        return $this;
    }

    /**
     * Gets jwks_uri
     *
     * @return string|null
     */
    public function getJwksUri()
    {
        return $this->container['jwks_uri'];
    }

    /**
     * Sets jwks_uri
     *
     * @param string|null $jwks_uri jwks_uri
     *
     * @return self
     */
    public function setJwksUri($jwks_uri)
    {
        if (is_null($jwks_uri)) {
            throw new \InvalidArgumentException('non-nullable jwks_uri cannot be null');
        }
        $this->container['jwks_uri'] = $jwks_uri;

        return $this;
    }

    /**
     * Gets display
     *
     * @return \AffinidiTdk\Clients\CredentialIssuanceClient\Model\WellKnownOpenIdCredentialIssuerResponseDisplay|null
     */
    public function getDisplay()
    {
        return $this->container['display'];
    }

    /**
     * Sets display
     *
     * @param \AffinidiTdk\Clients\CredentialIssuanceClient\Model\WellKnownOpenIdCredentialIssuerResponseDisplay|null $display display
     *
     * @return self
     */
    public function setDisplay($display)
    {
        if (is_null($display)) {
            throw new \InvalidArgumentException('non-nullable display cannot be null');
        }
        $this->container['display'] = $display;

        return $this;
    }

    /**
     * Gets scopes_supported
     *
     * @return string[]|null
     */
    public function getScopesSupported()
    {
        return $this->container['scopes_supported'];
    }

    /**
     * Sets scopes_supported
     *
     * @param string[]|null $scopes_supported scopes_supported
     *
     * @return self
     */
    public function setScopesSupported($scopes_supported)
    {
        if (is_null($scopes_supported)) {
            throw new \InvalidArgumentException('non-nullable scopes_supported cannot be null');
        }
        $allowedValues = $this->getScopesSupportedAllowableValues();
        if (array_diff($scopes_supported, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'scopes_supported', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['scopes_supported'] = $scopes_supported;

        return $this;
    }

    /**
     * Gets token_endpoint
     *
     * @return string|null
     */
    public function getTokenEndpoint()
    {
        return $this->container['token_endpoint'];
    }

    /**
     * Sets token_endpoint
     *
     * @param string|null $token_endpoint token_endpoint
     *
     * @return self
     */
    public function setTokenEndpoint($token_endpoint)
    {
        if (is_null($token_endpoint)) {
            throw new \InvalidArgumentException('non-nullable token_endpoint cannot be null');
        }
        $this->container['token_endpoint'] = $token_endpoint;

        return $this;
    }

    /**
     * Gets token_endpoint_auth_methods_supported
     *
     * @return string[]|null
     */
    public function getTokenEndpointAuthMethodsSupported()
    {
        return $this->container['token_endpoint_auth_methods_supported'];
    }

    /**
     * Sets token_endpoint_auth_methods_supported
     *
     * @param string[]|null $token_endpoint_auth_methods_supported token_endpoint_auth_methods_supported
     *
     * @return self
     */
    public function setTokenEndpointAuthMethodsSupported($token_endpoint_auth_methods_supported)
    {
        if (is_null($token_endpoint_auth_methods_supported)) {
            throw new \InvalidArgumentException('non-nullable token_endpoint_auth_methods_supported cannot be null');
        }
        $allowedValues = $this->getTokenEndpointAuthMethodsSupportedAllowableValues();
        if (array_diff($token_endpoint_auth_methods_supported, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'token_endpoint_auth_methods_supported', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['token_endpoint_auth_methods_supported'] = $token_endpoint_auth_methods_supported;

        return $this;
    }

    /**
     * Gets return_uris
     *
     * @return string[]|null
     */
    public function getReturnUris()
    {
        return $this->container['return_uris'];
    }

    /**
     * Sets return_uris
     *
     * @param string[]|null $return_uris return_uris
     *
     * @return self
     */
    public function setReturnUris($return_uris)
    {
        if (is_null($return_uris)) {
            throw new \InvalidArgumentException('non-nullable return_uris cannot be null');
        }
        $this->container['return_uris'] = $return_uris;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


